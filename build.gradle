/*
 * This file was generated by the Gradle 'init' task.
 */
plugins {
    id 'java'
    id 'java-library'
    id 'application'
    id 'maven-publish'
    id 'java-library-distribution'
}

group = "com.devamatre"
//name = "dLogger"
//version = '0.0.1-SNAPSHOT'
version = '1.1.0-SNAPSHOT'
description = "The ${name} Project"
sourceCompatibility = '1.8'
//archivesBaseName = "dLogger"

ext {
    orgName = 'Devamatre'
    releasesDir = 'Releases'
    log4jVersion = '1.2.17'
    jUnitVersion = '4.13.1'
    jUnitJupiterVersion = '5.9.3'
    loggerMainClass = 'com.devamatre.logger.testcases.TestLogger'
}

//archiveBaseName-archiveAppendix-archiveVersion-archiveClassifier.archiveExtension

repositories {
    mavenLocal()
    maven {
        url = uri('https://github.com/rslakra/Releases')
    }

    mavenCentral()
}

dependencies {
    implementation "log4j:log4j:${log4jVersion}"
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation "org.junit.jupiter:junit-jupiter-api:${jUnitJupiterVersion}"

    // Enabling Support for Old Versions
    // junit-vintage-engine for JUnit 3 or 4.
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${jUnitJupiterVersion}"
    // Enabling Support for Old Versions
    testCompileOnly "junit:junit:${jUnitVersion}"

}

test {
    useJUnitPlatform()
//    useJUnitPlatform {
//        includeTags 'fast'
//        excludeTags 'slow'
//    }
}

//uploadArchives {
//    repositories.mavenDeployer {
//        pom.project {
////            name archivesBaseName
//            organization {
//                name orgName
//            }
//        }
//
//        // fake repository used for testing
//        repository(id: 'rslakra', url: 'file:ext.releasesDir/')
//    }
//}

//task sourcesJar(type: Jar) {
//    archiveClassifier = 'src'
//    println "sourceSets.main.allSource: ${sourceSets.main.allSource}"
//    println "Src: ${projectDir.path}/${archiveClassifier}"
//    from sourceSets.main.allSource
////    from file("${buildDir}/${archiveClassifier}")
//
//    doLast {
//        println archiveFileName.get()
//        println relativePath(destinationDirectory)
//        println relativePath(archiveFile)
//    }
//}


//task javadocJar(type: Jar) {
//    archiveClassifier = 'javadoc'
//    println "Src: ${projectDir.path}/${archiveClassifier}"
//    from file("${buildDir}/${archiveClassifier}")
//
//    doLast {
//        println archiveFileName.get()
//        println relativePath(destinationDirectory)
//        println relativePath(archiveFile)
//    }
//}

//task packageDistribution(type: Zip) {
//    destinationDirectory = file("${buildDir}/dist")
//    from "${buildDir}/toArchive"
//
//    doLast {
//        println archiveFileName.get()
//        println relativePath(destinationDirectory)
//        println relativePath(archiveFile)
//    }
//}

//artifacts {
//    archives file: file(extFiles.main), type: 'jar'
//    archives sourcesJar
//    archives javadocJar
//}


/**
 * Runs the project.
 */
//run {
//    if (project.hasProperty('args')) {
//        args project.args.split('\\s')
//    }
//}

application {
    mainClass = "${loggerMainClass}"
}

java {
//    withJavadocJar()
    withSourcesJar()
}


task createDocs {
    def docs = file("${buildDir}/docs")
    outputs.dir docs
    doLast {
        docs.mkdirs()
        new File(docs, 'readme.txt').write('Read me!')
    }
}


tasks.withType(Tar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

//tasks.withType(BootJar).configureEach {
//    duplicatesStrategy = DuplicatesStrategy.INCLUDE
//}

tasks.withType(Zip).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

distributions {
    main {
        println "distributionBaseName: ${archivesBaseName}"
//        println "distributionClassifier: ${classifier}"
        distributionBaseName = "${archivesBaseName}"
        contents {
            from(createDocs) {
                into 'docs'
            }

            contents {
                from 'src/dist'
            }
        }
    }
}

/**
 * Customizing the publication identity
 *
 * Maven restricts groupId and artifactId to a limited character set ([A-Za-z0-9_\\-.]+) and
 * Gradle enforces this restriction. For version (as well as the artifact extension and classifier properties),
 * Gradle will handle any valid Unicode character.
 */
publishing {

    publications {
        maven(MavenPublication) {
//            println(this.mavenPomDir())
            from(components.java)
        }

//        mavenJava(MavenPublication) {
////            artifactId = 'dLogger'
//            from components.java
//            versionMapping {
//                usage('java-api') {
//                    fromResolutionOf('runtimeClasspath')
//                }
//                usage('java-runtime') {
//                    fromResolutionResult()
//                }
//            }
//            pom {
////                name = 'dLogger'
////                description = 'A concise description of dLogger'
////                url = 'http://www.devamatre.com/dLogger'
////                properties = [
////                        myProp: "value",
////                        "prop.with.dots": "anotherValue"
////                ]
//                licenses {
//                    license {
//                        name = 'The Apache License, Version 2.0'
//                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                    }
//                }
//                developers {
//                    developer {
//                        id = 'rslakra'
//                        name = 'Rohtash Lakra'
//                        email = 'rohtash.lakra@devamatre.com'
//                    }
//                }
////                scm {
////                    // https://github.com/rslakra/Logger.git
////                    connection = 'scm:git:git://github.com/rslakra/Logger.git'
////                    developerConnection = 'scm:git:ssh://github.com/rslakra/Logger.git'
////                    url = 'http://github.com/rslakra/Logger.git'
////                }
//            }
//        }
    }

    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://org/repo
//            name = "${name}"
            def releasesRepoUrl = "${buildDir}/repos/releases"
            def snapshotsRepoUrl = "${buildDir}/repos/snapshots"
//            url = "file://${projectDir}/../${releasesDir}"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            def releasesDirPath = new File(getProjectDir().getParent() + "/${releasesDir}")
            println "releasesDirPath: ${releasesDirPath}"
        }
    }

}

//task copyRelease(type: Copy) {
//    def releasesDirPath = new File(getProjectDir().getParent() + "/${releasesDir}")
//    println "releasesDirPath: ${releasesDirPath}"
//
////    print(files(new File("${projectDir}/../${releasesDir}")))
////    from files(new File("${projectDir}/../${releasesDir}"));
////    into files(new File("${projectDir}/../${releasesDir}"));
//}


