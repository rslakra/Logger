/*
 * This file was generated by the Gradle 'init' task.
 */
plugins {
    id 'java'
    id 'java-library'
    id 'application'
    id 'maven-publish'
    id 'maven'
    id 'java-library-distribution'
}

group = "com.devamatre"
//name = "dLogger"
version = '1.1-SNAPSHOT'
description = "The ${name} Project"
sourceCompatibility = '1.8'
//archivesBaseName = "dLogger"

ext {
    orgName = 'Devamatre'
    releasesDir = 'Releases'
    log4jVersion = '1.2.17'
    jUnitVersion = '4.13.1'
    jUnitJupiterVersion = '5.6.0'
    loggerMainClass = 'com.devamatre.logger.testcases.TestLogger'
}

//archiveBaseName-archiveAppendix-archiveVersion-archiveClassifier.archiveExtension

repositories {
    mavenLocal()
    maven {
        url = uri('https://github.com/rslakra/Releases')
    }

    mavenCentral()
}

dependencies {
    implementation "log4j:log4j:${log4jVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${jUnitJupiterVersion}"
    // The runtime is junit-jupiter-engine for JUnit 5
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

    // Enabling Support for Old Versions

    // junit-vintage-engine for JUnit 3 or 4.
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${jUnitJupiterVersion}"
    // Enabling Support for Old Versions
    testCompileOnly "junit:junit:${jUnitVersion}"

}

test {
    useJUnitPlatform()
//    useJUnitPlatform {
//        includeTags 'fast'
//        excludeTags 'slow'
//    }
}

uploadArchives {
    repositories.mavenDeployer {
        pom.project {
//            name archivesBaseName
            organization {
                name orgName
            }
        }

        // fake repository used for testing
        repository(id: 'rslakra', url: 'file:ext.releasesDir/')
    }
}

//task sourcesJar(type: Jar) {
//    archiveClassifier = 'src'
//    println "sourceSets.main.allSource: ${sourceSets.main.allSource}"
//    println "Src: ${projectDir.path}/${archiveClassifier}"
//    from sourceSets.main.allSource
////    from file("${buildDir}/${archiveClassifier}")
//
//    doLast {
//        println archiveFileName.get()
//        println relativePath(destinationDirectory)
//        println relativePath(archiveFile)
//    }
//}


//task javadocJar(type: Jar) {
//    archiveClassifier = 'javadoc'
//    println "Src: ${projectDir.path}/${archiveClassifier}"
//    from file("${buildDir}/${archiveClassifier}")
//
//    doLast {
//        println archiveFileName.get()
//        println relativePath(destinationDirectory)
//        println relativePath(archiveFile)
//    }
//}

//task packageDistribution(type: Zip) {
//    destinationDirectory = file("${buildDir}/dist")
//    from "${buildDir}/toArchive"
//
//    doLast {
//        println archiveFileName.get()
//        println relativePath(destinationDirectory)
//        println relativePath(archiveFile)
//    }
//}

//artifacts {
//    archives file: file(extFiles.main), type: 'jar'
//    archives sourcesJar
//    archives javadocJar
//}


/**
 * Runs the project.
 */
//run {
//    if (project.hasProperty('args')) {
//        args project.args.split('\\s')
//    }
//}

application {
    mainClass = "${loggerMainClass}"
}


task createDocs {
    def docs = file("${buildDir}/docs")
    outputs.dir docs
    doLast {
        docs.mkdirs()
        new File(docs, 'readme.txt').write('Read me!')
    }
}

distributions {
    main {
        distributionBaseName = "${name}"
        contents {
            from(createDocs) {
                into 'docs'
            }

            contents {
                from 'src/dist'
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }

    repositories {
        maven {
//            name = "${name}"
            url = "file://${projectDir}/../${releasesDir}"
        }
    }
}
